name: Docker Image Publishing

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: true
        default: 'latest'

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/student-management

jobs:
  publish-images:
    name: Build and Publish Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service:
          - name: user-management
            path: microservices/user-management-service
            description: User Management Service
          - name: academic
            path: microservices/academic-service
            description: Academic Service
          - name: attendance
            path: microservices/attendance-service
            description: Attendance Service
          - name: notification
            path: microservices/notification-service
            description: Notification Service
          - name: leave-management
            path: microservices/leave-management-service
            description: Leave Management Service
          - name: feedback
            path: microservices/feedback-service
            description: Feedback Service
          - name: assessment
            path: microservices/assessment-service
            description: Assessment Service
          - name: financial
            path: microservices/financial-service
            description: Financial Service
          - name: api-gateway
            path: microservices/api-gateway
            description: API Gateway
          - name: frontend
            path: microservices/frontend-service
            description: Frontend Service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from release
        id: version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.path }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}:${{ steps.version.outputs.VERSION }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}:latest
          labels: |
            org.opencontainers.image.title=${{ matrix.service.description }}
            org.opencontainers.image.description=${{ matrix.service.description }}
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}:${{ steps.version.outputs.VERSION }}
          format: spdx-json
          output-file: sbom-${{ matrix.service.name }}.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v5
        with:
          name: sbom-${{ matrix.service.name }}
          path: sbom-${{ matrix.service.name }}.spdx.json

  create-manifest:
    name: Create Deployment Manifest
    runs-on: ubuntu-latest
    needs: publish-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment manifest
        run: |
          cat > deployment-manifest.yml << EOF
          version: ${{ steps.version.outputs.VERSION }}
          release_date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          commit: ${{ github.sha }}
          images:
            user-management: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-user-management:${{ steps.version.outputs.VERSION }}
            academic: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-academic:${{ steps.version.outputs.VERSION }}
            attendance: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-attendance:${{ steps.version.outputs.VERSION }}
            notification: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-notification:${{ steps.version.outputs.VERSION }}
            leave-management: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-leave-management:${{ steps.version.outputs.VERSION }}
            feedback: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-feedback:${{ steps.version.outputs.VERSION }}
            assessment: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-assessment:${{ steps.version.outputs.VERSION }}
            financial: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-financial:${{ steps.version.outputs.VERSION }}
            api-gateway: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-api-gateway:${{ steps.version.outputs.VERSION }}
            frontend: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend:${{ steps.version.outputs.VERSION }}
          EOF

      - name: Upload manifest
        uses: actions/upload-artifact@v5
        with:
          name: deployment-manifest
          path: deployment-manifest.yml
